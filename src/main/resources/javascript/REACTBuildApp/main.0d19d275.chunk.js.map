{"version":3,"sources":["assets/loader_4.gif","components/App.js","misc/serviceWorker.js","index.js"],"names":["module","exports","widen","axios","create","baseURL","headers","Authorization","responseType","timeout","App","props","React","useState","query","setQuery","categories","setCategories","iframe","setIframe","url","params","hideSearchBar","search","setSearch","isLoading","setIsLoading","isError","setIsError","useEffect","a","get","console","log","fetchData","instantSearch","data","window","addEventListener","event","Container","fluid","Row","Col","map","category","key","id","href","onClick","e","preventDefault","assetcategory","handleCategory","name","xs","InputGroup","className","FormControl","placeholder","onChange","value","target","Append","Button","variant","src","spinner","frameBorder","width","height","Boolean","location","hostname","match","widenPickerInterface","_context","_data","this","contextData","load","values","d","undefined","Array","isArray","from","add","path","product","remove","filter","item","endsWith","removeAt","index","splice","removeAll","widenPicker","context","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d19d275.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader_4.a6ec563b.gif\";","import React from 'react';\n// import logo from '../assets/logo.svg';\nimport spinner from \"assets/loader_4.gif\";\nimport 'components/App.scss';\nimport axios from 'axios';\n\nimport {InputGroup, FormControl, Button, Row, Container,Col} from \"react-bootstrap\";\nimport get from \"lodash.get\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst widen=axios.create({\n    baseURL:\"https://api.widencollective.com/v2\",\n    headers:{\n        Authorization: 'Bearer virbac/ba4d0a71907a17aff9ebddc1fc91fd3a'\n    },\n    responseType:\"json\",\n    // withCredentials: true,//important to send the cookie\n    timeout:2500\n});\n\n\nconst App = (props) => {\n\n    const [query, setQuery] = React.useState();\n    const [categories, setCategories] = React.useState([]);\n  const [iframe, setIframe] = React.useState();\n    const [search, setSearch] = React.useState({\n        url:\"/integrations/url\",\n        params: {\n            hideSearchBar: true,\n            query: query\n        }\n    });\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [isError, setIsError] = React.useState(false);\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n        const categories = await widen.get(\"/categories\");\n        console.log(\"categories : \",categories)\n        setCategories(get(categories,\"data.items\",[]));\n    };\n\n    fetchData();\n\n  },[]);\n\n    React.useEffect(() => {\n        if(search.params.query){\n            const fetchData = async () => {\n                setIframe(false);\n                setIsError(false);\n                setIsLoading(true);\n                try {\n                    const instantSearch = await widen.get(search.url,{params:search.params});\n                    console.log(\"instantSearch : \", instantSearch.data);\n                    //const frameURL = URL.createObjectURL(instantSearch.data);\n                    setIframe(instantSearch.data.url);\n                } catch (error) {\n                    setIsError(true);\n                }\n                setIsLoading(false);\n            };\n            fetchData();\n        }\n    },[search])\n\n    window.addEventListener('message', event =>{\n        //TODO verifier si j'ai un event.data.items[0].embed_code sinon laisser passer\n        // console.log(\"message : \",event.data);\n        // const embedCode = event.data.items[0].embed_code;\n        // console.log(embedCode);\n\n        // Insert embedCode into userâ€™s html content\n        // Close iframe\n    })\n\n  const handleChange = (e) =>{\n      const value= e.target.value;\n      console.log(\"value : \",value);\n      setQuery(value);\n  }\n  const handleSearch = () =>{\n      console.log(\"handleSearch query : \",query);\n        const params = {...search.params,query}\n      setSearch({...search,params});\n  }\n\n  const handleCategory = (e,category) => {\n      console.log(\"handleCategory category : \",category);\n      e.preventDefault();\n      // const _query = `${query}&assetcategory:${category.id}`;//encodeURI();\n      // const params = {...search.params,query:_query}\n      const params = {...search.params,assetcategory:category.id};\n      setSearch({...search,params});\n  }\n\n  return (\n      <Container fluid>\n          <Row>\n              <Col>\n                  <ul>\n                  {categories.map(category =>\n                      <li key={category.id}>\n                          <a href=\"#\" onClick={ e => handleCategory(e,category)}>\n                              {category.name}\n                          </a>\n                      </li>\n                    )}\n                  </ul>\n              </Col>\n              <Col xs={10}>\n                  {isError && <div>Something went wrong ...</div>}\n\n                  <InputGroup className=\"mb-3\">\n                      <FormControl\n                          placeholder=\"Search text\"\n                          onChange={handleChange}\n                      />\n                      <InputGroup.Append>\n                          <Button\n                              variant=\"outline-secondary\"\n                              onClick={handleSearch}>\n                              Search\n                          </Button>\n                      </InputGroup.Append>\n                  </InputGroup>\n                  {isLoading &&\n                    <img src={spinner}/>\n                  }\n                  {/*<img src={spinner}/>*/}\n                  {iframe &&\n                      <iframe frameBorder=\"0\" src={iframe} width=\"100%\" height=\"700px\"></iframe>\n                  }\n              </Col>\n          </Row>\n      </Container>\n\n\n  );\n}\n\n          // <div className=\"App\">\n          //     <header className=\"App-header\">\n\n          //     </header>\n          // </div>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'components/App';\nimport * as serviceWorker from 'misc/serviceWorker';\n\nconst widenPickerInterface = {\n    _context: {},\n    _data: [],\n\n    get context() {\n        return this._context;\n    },\n    get data(){\n        return this._data;\n    },\n\n    set context(contextData) {\n        this._context = contextData;\n    },\n\n    set data(data){\n        this._data = data;\n    },\n\n    load: function (values) {\n        console.log(values.d);\n        if (values.d !== undefined && Array.isArray(values.d)) {\n            widenPickerInterface.data = Array.from(values.d);\n        }\n    },\n\n    add: function (path, product) {\n        this.data = [...this.data,path];\n        return this.data;\n    },\n\n    remove: function (path) {\n        this.data = this.data.filter( item => !item.endsWith(path) );\n    },\n\n    removeAt: function (index) {\n        if(index !== -1) {\n            this.data = this.data.splice(index, 1);\n            return this.data;\n        }\n        return null;\n    },\n\n    removeAll: function () {\n        widenPickerInterface.data = [];\n    },\n\n    // get: function () {\n    //     return productPickerData.data;\n    // }\n\n};\n\nconst render = (target,context) =>{\n    ReactDOM.render(\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>,\n        document.getElementById(target)\n    );\n}\n\nwindow.widenPicker = render;\nwindow.widenPickerInterface = widenPickerInterface;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}